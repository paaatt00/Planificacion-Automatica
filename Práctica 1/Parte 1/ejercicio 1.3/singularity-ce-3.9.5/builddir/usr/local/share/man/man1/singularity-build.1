.nh
.TH "singularity" "1" "Mar 2022" "Auto generated by spf13/cobra" ""

.SH NAME
.PP
singularity-build - Build a Singularity image


.SH SYNOPSIS
.PP
\fBsingularity build [local options...]  \fP


.SH DESCRIPTION
.PP
IMAGE PATH:

.PP
When Singularity builds the container, output can be one of a few formats:

.PP
.RS

.nf
  default:    The compressed Singularity read only image format (default)
  sandbox:    This is a read-write container within a directory structure

.fi
.RE

.PP
note: It is a common workflow to use the "sandbox" mode for development of the
  container, and then build it as a default Singularity image for production
  use. The default format is immutable.

.PP
BUILD SPEC:

.PP
The build spec target is a definition (def) file, local image, or URI that can
  be used to create a Singularity container. Several different local target
  formats exist:

.PP
.RS

.nf
  def file  : This is a recipe for building a container (examples below)
  directory:  A directory structure containing a (ch)root file system
  image:      A local image on your machine (will convert to sif if
              it is legacy format)

.fi
.RE

.PP
Targets can also be remote and defined by a URI of the following formats:

.PP
.RS

.nf
  library://  an image library (default https://cloud.sylabs.io/library)
  docker://   a Docker/OCI registry (default Docker Hub)
  shub://     a Singularity registry (default Singularity Hub)
  oras://     an OCI registry that holds SIF files using ORAS

.fi
.RE


.SH OPTIONS
.PP
\fB--arch\fP="amd64"
	architecture for remote build

.PP
\fB-B\fP, \fB--bind\fP=[]
	a user-bind path specification. spec has the format src[:dest[:opts]],where src and dest are outside and inside paths. If dest is not given,it is set equal to src. Mount options ('opts') may be specified as 'ro'(read-only) or 'rw' (read/write, which is the default).Multiple bind paths can be given by a comma separated list. (not supported with remote build)

.PP
\fB--builder\fP=""
	remote Build Service URL, setting this implies --remote

.PP
\fB-d\fP, \fB--detached\fP[=false]
	submit build job and print build ID (no real-time logs and requires --remote)

.PP
\fB--disable-cache\fP[=false]
	do not use cache or create cache

.PP
\fB--docker-login\fP[=false]
	login to a Docker Repository interactively

.PP
\fB-e\fP, \fB--encrypt\fP[=false]
	build an image with an encrypted file system

.PP
\fB-f\fP, \fB--fakeroot\fP[=false]
	build using user namespace to fake root user (requires a privileged installation)

.PP
\fB--fix-perms\fP[=false]
	ensure owner has rwX permissions on all container content for oci/docker sources

.PP
\fB-F\fP, \fB--force\fP[=false]
	overwrite an image file if it exists

.PP
\fB-h\fP, \fB--help\fP[=false]
	help for build

.PP
\fB--json\fP[=false]
	interpret build definition as JSON

.PP
\fB--library\fP=""
	container Library URL

.PP
\fB--mount\fP=[]
	a mount specification e.g. 'type=bind,source=/opt,destination=/hostopt'.

.PP
\fB--no-cleanup\fP[=false]
	do NOT clean up bundle after failed build, can be helpful for debugging

.PP
\fB--no-https\fP[=false]
	use http instead of https for docker:// oras:// and library:///... URIs

.PP
\fB-T\fP, \fB--notest\fP[=false]
	build without running tests in %test section

.PP
\fB--nv\fP[=false]
	inject host Nvidia libraries during build for post and test sections (not supported with remote build)

.PP
\fB--nvccli\fP[=false]
	use nvidia-container-cli for GPU setup (experimental)

.PP
\fB--passphrase\fP[=false]
	prompt for an encryption passphrase

.PP
\fB--pem-path\fP=""
	enter an path to a PEM formatted RSA key for an encrypted container

.PP
\fB-r\fP, \fB--remote\fP[=false]
	build image remotely (does not require root)

.PP
\fB--rocm\fP[=false]
	inject host Rocm libraries during build for post and test sections (not supported with remote build)

.PP
\fB-s\fP, \fB--sandbox\fP[=false]
	build image as sandbox format (chroot directory structure)

.PP
\fB--section\fP=[all]
	only run specific section(s) of deffile (setup, post, files, environment, test, labels, none)

.PP
\fB-u\fP, \fB--update\fP[=false]
	run definition over existing container (skips header)

.PP
\fB--writable-tmpfs\fP[=false]
	during the %test section, makes the file system accessible as read-write with non persistent data (with overlay support only)


.SH EXAMPLE
.PP
.RS

.nf


  DEF FILE BASE OS:

      Library:
          Bootstrap: library
          From: debian:9

      Docker:
          Bootstrap: docker
          From: tensorflow/tensorflow:latest
          IncludeCmd: yes # Use the CMD as runscript instead of ENTRYPOINT

      Singularity Hub:
          Bootstrap: shub
          From: singularityhub/centos

      YUM/RHEL:
          Bootstrap: yum
          OSVersion: 7
          MirrorURL: http://mirror.centos.org/centos-%{OSVERSION}/%{OSVERSION}/os/x86_64/
          Include: yum

      Debian/Ubuntu:
          Bootstrap: debootstrap
          OSVersion: trusty
          MirrorURL: http://us.archive.ubuntu.com/ubuntu/

      Local Image:
          Bootstrap: localimage
          From: /home/dave/starter.img

      Scratch:
          Bootstrap: scratch # Populate the container with a minimal rootfs in %setup

  DEFFILE SECTIONS:

      %pre
          echo "This is a scriptlet that will be executed on the host, as root before"
          echo "the container has been bootstrapped. This section is not commonly used."

      %setup
          echo "This is a scriptlet that will be executed on the host, as root, after"
          echo "the container has been bootstrapped. To install things into the container"
          echo "reference the file system location with $SINGULARITY_ROOTFS."

      %post
          echo "This scriptlet section will be executed from within the container after"
          echo "the bootstrap/base has been created and setup."

      %test
          echo "Define any test commands that should be executed after container has been"
          echo "built. This scriptlet will be executed from within the running container"
          echo "as the root user. Pay attention to the exit/return value of this scriptlet"
          echo "as any non-zero exit code will be assumed as failure."
          exit 0

      %runscript
          echo "Define actions for the container to be executed with the run command or"
          echo "when container is executed."

      %startscript
          echo "Define actions for container to perform when started as an instance."

      %labels
          HELLO MOTO
          KEY VALUE

      %files
          /path/on/host/file.txt /path/on/container/file.txt
          relative_file.txt /path/on/container/relative_file.txt

      %environment
          LUKE=goodguy
          VADER=badguy
          HAN=someguy
          export HAN VADER LUKE

      %help
          This is a text file to be displayed with the run-help command.

  COMMANDS:

      Build a sif file from a Singularity recipe file:
          $ singularity build /tmp/debian0.sif /path/to/debian.def

      Build a sif image from the Library:
          $ singularity build /tmp/debian1.sif library://debian:latest

      Build a base sandbox from DockerHub, make changes to it, then build sif
          $ singularity build --sandbox /tmp/debian docker://debian:latest
          $ singularity exec --writable /tmp/debian apt-get install python
          $ singularity build /tmp/debian2.sif /tmp/debian

.fi
.RE


.SH SEE ALSO
.PP
\fBsingularity(1)\fP


.SH HISTORY
.PP
7-Mar-2022 Auto generated by spf13/cobra
