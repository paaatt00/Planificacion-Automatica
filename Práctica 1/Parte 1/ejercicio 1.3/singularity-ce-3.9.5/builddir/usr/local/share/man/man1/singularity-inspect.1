.nh
.TH "singularity" "1" "Mar 2022" "Auto generated by spf13/cobra" ""

.SH NAME
.PP
singularity-inspect - Show metadata for an image


.SH SYNOPSIS
.PP
\fBsingularity inspect [inspect options...] \fP


.SH DESCRIPTION
.PP
Inspect will show you labels, environment variables, apps and scripts associated
  with the image determined by the flags you pass. By default, they will be shown in
  plain text. If you would like to list them in json format, you should use the --json flag.


.SH OPTIONS
.PP
\fB--all\fP[=false]
	show all available data (imply --json option)

.PP
\fB--app\fP=""
	inspect a specific app

.PP
\fB-d\fP, \fB--deffile\fP[=false]
	show the Singularity recipe file that was used to generate the image

.PP
\fB-e\fP, \fB--environment\fP[=false]
	show the environment settings for the image

.PP
\fB-h\fP, \fB--help\fP[=false]
	help for inspect

.PP
\fB-H\fP, \fB--helpfile\fP[=false]
	inspect the runscript helpfile, if it exists

.PP
\fB-j\fP, \fB--json\fP[=false]
	print structured json instead of sections

.PP
\fB-l\fP, \fB--labels\fP[=false]
	show the labels for the image (default)

.PP
\fB--list-apps\fP[=false]
	list all apps in a container

.PP
\fB-r\fP, \fB--runscript\fP[=false]
	show the runscript for the image

.PP
\fB-s\fP, \fB--startscript\fP[=false]
	show the startscript for the image

.PP
\fB-t\fP, \fB--test\fP[=false]
	show the test script for the image


.SH EXAMPLE
.PP
.RS

.nf

  $ singularity inspect ubuntu.sif
  
  If you want to list the applications (apps) installed in a container (located at
  /scif/apps) you should run inspect command with --list-apps <container-image> flag.
  ( See https://sci-f.github.io for more information on SCIF apps)

  The following environment variables are available to you when called 
  from the shell inside the container. The top variables are relevant 
  to the active app (--app <app>) and the bottom available for all 
  apps regardless of the active app. Both sets of variables are also available during development (at build time).

  ACTIVE APP ENVIRONMENT:
      SCIF_APPNAME       the name for the active application
      SCIF_APPROOT       the installation folder for the application created at /scif/apps/<app>
      SCIF_APPMETA       the application metadata folder
      SCIF_APPDATA       the data folder created for the application at /scif/data/<app>
        SCIF_APPINPUT    expected input folder within data base folder
        SCIF_APPOUTPUT   the output data folder within data base folder

      SCIF_APPENV        points to the application's custom environment.sh file in its metadata folder
      SCIF_APPLABELS     is the application's labels.json in the metadata folder
      SCIF_APPBIN        is the bin folder for the app, which is automatically added to the $PATH when the app is active
      SCIF_APPLIB        is the application's library folder that is added to the LD_LIBRARY_PATH
      SCIF_APPRUN        is the runscript
      SCIF_APPHELP       is the help file for the runscript
      SCIF_APPTEST       is the testing script (test.sh) associated with the application
      SCIF_APPNAME       the name for the active application
      SCIF_APPFILES      the files section associated with the application that are added to


  GLOBAL APP ENVIRONMENT:
    
      SCIF_DATA             scif defined data base for all apps (/scif/data)
      SCIF_APPS             scif defined install bases for all apps (/scif/apps)
      SCIF_APPROOT_<app>    root for application <app>
      SCIF_APPDATA_<app>    data root for application <app>

  To list all your apps:

  $ singularity inspect --list-apps ubuntu.sif 

  To list only labels in the json format from an image:

  $ singularity inspect --json --labels ubuntu.sif

  To verify you own a single application on your container image, use the --app <appname> flag:

  $ singularity inspect --app <appname> ubuntu.sif

.fi
.RE


.SH SEE ALSO
.PP
\fBsingularity(1)\fP


.SH HISTORY
.PP
7-Mar-2022 Auto generated by spf13/cobra
